
The downloaded binary packages are in
	/var/folders/0d/ldk0yf0s73jfz51ll7sgchgr0000gn/T//Rtmp0kibYU/downloaded_packages
> # put it all together
> final_data_with_q4 <- team_game_stats |>
+   left_join(q4_team_game_stats, by = c("game_id", "posteam")) |>
+   left_join(game_scores, by = "game_id") |>
+   mutate(Win = ifelse(posteam == Winner, 1, 0)) |>
+   select(game_id, posteam, RushingYards, PassingYards, TotalYards, home_score, away_score, Winner, Win, Q4_RushingYards, Q4_PassingYards, Q4_TotalYards)
Error in select(mutate(left_join(left_join(team_game_stats, q4_team_game_stats,  : 
  could not find function "select"
  
  The error indicates that the select function is not recognized. This often happens when the required library for the select function is not loaded. In your code, you’re likely using the select function from the dplyr package. To fix this, ensure that dplyr is installed and loaded in your R session.

Steps to resolve the issue:

	1.	Install dplyr if it’s not installed:

install.packages("dplyr")


	2.	Load the dplyr package:

library(dplyr)


	3.	Rerun your code:

final_data_with_q4 <- team_game_stats |> 
  left_join(q4_team_game_stats, by = c("game_id", "posteam")) |> 
  left_join(game_scores, by = "game_id") |> 
  mutate(Win = ifelse(posteam == Winner, 1, 0)) |> 
  select(game_id, posteam, RushingYards, PassingYards, TotalYards, home_score, away_score, Winner, Win, Q4_RushingYards, Q4_PassingYards, Q4_TotalYards)



Additional Notes:

	•	The |> pipe operator is used in R 4.1.0 or later. If you’re using an older version of R, replace |> with %>% (from the magrittr package or included with dplyr).
	•	If you prefer the native pipe operator (|>), ensure your R version is up-to-date.
	
	#### Preamble ####
# Purpose: Cleans and writes the data
# Author: Alexander Guarasci
# Date: 18 April, 2024
# Contact: alexander.guarasci@mail.utoronto.ca
# License: MIT
# Pre-requisites: install nflverse and tidyverse

library(tidyverse)
library(nflverse)

# load dta
pbp_data <- load_pbp(2023)

# construct variiables for rushing yards, passing yards and total yards
team_game_stats <- pbp_data |>
  group_by(game_id, posteam) |>
  summarize(
    RushingYards = sum(rushing_yards, na.rm = TRUE),
    PassingYards = sum(passing_yards, na.rm = TRUE),
    TotalYards = RushingYards + PassingYards,
    .groups = "drop"
  )

# construct variiables for q4 rushing yards, passing yards and total yards
q4_team_game_stats <- pbp_data |>
  filter(qtr == 4) |>
  group_by(game_id, posteam) |>
  summarize(
    Q4_RushingYards = sum(rushing_yards, na.rm = TRUE),
    Q4_PassingYards = sum(passing_yards, na.rm = TRUE),
    Q4_TotalYards = Q4_RushingYards + Q4_PassingYards,
    .groups = "drop"
  )

# construct variiables for winner
game_scores <- pbp_data |>
  select(game_id, home_team, away_team, home_score, away_score) |>
  distinct(game_id, .keep_all = TRUE) |>
  mutate(Winner = case_when(
    home_score > away_score ~ home_team,
    away_score > home_score ~ away_team,
    TRUE ~ "Tie"
  ))

# put it all together
final_data_with_q4 <- team_game_stats |>
  left_join(q4_team_game_stats, by = c("game_id", "posteam")) |>
  left_join(game_scores, by = "game_id") |>
  mutate(Win = ifelse(posteam == Winner, 1, 0)) |>
  select(game_id, posteam, RushingYards, PassingYards, TotalYards, home_score, away_score, Winner, Win, Q4_RushingYards, Q4_PassingYards, Q4_TotalYards)


cleaned_data <- final_data_with_q4 |>
  filter(!is.na(posteam))

write_csv(cleaned_data, file = here::here("data/analysis_data/cleaned_data.csv"))

how do i write a script that creates a parquet file that has all the play by play data from 1999-2024

To create a script that saves all play-by-play data from 1999 to 2024 in a Parquet file, you can use the following steps:
	1.	Use the nflverse package’s load_pbp() function to download play-by-play data for multiple seasons.
	2.	Concatenate the data for all years into a single data frame.
	3.	Write the resulting data frame to a Parquet file using the arrow package.

Here’s the complete script:

Script

#### Preamble ####
# Purpose: Download and save play-by-play data (1999–2024) as a Parquet file
# Author: Alexander Guarasci
# Date: 18 April, 2024
# Contact: alexander.guarasci@mail.utoronto.ca
# License: MIT
# Pre-requisites: Install nflverse, tidyverse, and arrow packages

library(tidyverse)
library(nflverse)
library(arrow)

# Load play-by-play data for multiple years
years <- 1999:2024

# Initialize an empty list to store data for each year
pbp_list <- list()

# Loop through each year and load play-by-play data
for (year in years) {
  message("Loading data for ", year)
  pbp_list[[as.character(year)]] <- load_pbp(year)
}

# Combine all years into a single data frame
pbp_data <- bind_rows(pbp_list)

# Save the data as a Parquet file
write_parquet(pbp_data, file = here::here("data/pbp_1999_2024.parquet"))

message("Play-by-play data saved to data/pbp_1999_2024.parquet")

Key Details

	1.	Loop Through Years: The script downloads data year by year using load_pbp().
	2.	Combine Data: bind_rows() combines the yearly data into one data.frame.
	3.	Parquet Format: The arrow package’s write_parquet() function saves the combined data in Parquet format.
	4.	Dependencies: Make sure the arrow package is installed. If not, install it using install.packages("arrow").

Notes

	•	Memory Usage: Ensure sufficient memory for loading all play-by-play data.
	•	Error Handling: You can add error-handling mechanisms (e.g., tryCatch) to gracefully skip years that fail to load.
	•	Directory Structure: Verify that the data/ directory exists. If not, create it or specify a valid path.

Run this script to create a Parquet file with all the play-by-play data from 1999 to 2024!

the script doesn't download the data anywhere

The nflverse::load_pbp() function downloads the data into memory during execution but doesn’t store it locally on disk. To ensure the data is saved locally and persists across sessions, you can modify the script to explicitly download and save the raw play-by-play data for each year as a CSV or Parquet file.

Below is a revised script that both downloads the data and saves each year’s data locally. Then, it combines the files into a single Parquet file for all years.

Revised Script

#### Preamble ####
# Purpose: Download and save play-by-play data (1999–2024) as individual files, then merge into one Parquet file
# Author: Alexander Guarasci
# Date: 18 April, 2024
# Contact: alexander.guarasci@mail.utoronto.ca
# License: MIT
# Pre-requisites: Install nflverse, tidyverse, and arrow packages

library(tidyverse)
library(nflverse)
library(arrow)
library(here)

# Create a directory to store yearly data if it doesn't exist
output_dir <- here::here("data/pbp_yearly")
if (!dir.exists(output_dir)) {
  dir.create(output_dir, recursive = TRUE)
}

# Define years to download
years <- 1999:2024

# Loop through each year, download the data, and save it as a CSV
for (year in years) {
  message("Downloading data for ", year)
  tryCatch(
    {
      pbp_year <- load_pbp(year)
      write_csv(pbp_year, file = file.path(output_dir, paste0("pbp_", year, ".csv")))
      message("Data for ", year, " saved successfully.")
    },
    error = function(e) {
      message("Failed to download data for ", year, ": ", e$message)
    }
  )
}

# Combine all yearly data into a single Parquet file
message("Combining all years into a single Parquet file...")
pbp_files <- list.files(output_dir, pattern = "pbp_.*\\.csv$", full.names = TRUE)

# Read and combine all CSV files
pbp_combined <- pbp_files |> 
  map_dfr(read_csv)

# Save the combined data as a Parquet file
combined_output_file <- here::here("data/pbp_1999_2024.parquet")
write_parquet(pbp_combined, file = combined_output_file)

message("All play-by-play data saved to ", combined_output_file)

How the Script Works

	1.	Yearly Downloads:
	•	Each year’s play-by-play data is downloaded using load_pbp(year).
	•	Saved as a CSV file in the data/pbp_yearly/ directory.
	•	Handles download errors gracefully using tryCatch.
	2.	Combining Data:
	•	All saved CSV files are read into R using map_dfr(read_csv), which combines them into a single data frame.
	•	The combined data is saved as a Parquet file (pbp_1999_2024.parquet).
	3.	Error Handling:
	•	If the download fails for a particular year, it logs the error and continues to the next year.

Outputs

	1.	Individual CSV files for each year in the data/pbp_yearly/ folder.
	2.	A single combined Parquet file (data/pbp_1999_2024.parquet).

Pre-requisites

	•	Install the required packages if not already installed:

install.packages(c("tidyverse", "arrow", "here"))
remotes::install_github("nflverse/nflfastR")



Now the data is downloaded and saved for future use!

~/nfl/data

save it to this folder

Here’s the updated script to save the play-by-play data into the ~/nfl/data directory. The script now directly saves the yearly CSV files into this folder and creates the combined Parquet file in the same location.

Updated Script

#### Preamble ####
# Purpose: Download and save play-by-play data (1999–2024) as individual files, then merge into one Parquet file
# Author: Alexander Guarasci
# Date: 18 April, 2024
# Contact: alexander.guarasci@mail.utoronto.ca
# License: MIT
# Pre-requisites: Install nflverse, tidyverse, and arrow packages

library(tidyverse)
library(nflverse)
library(arrow)

# Define the output directory
output_dir <- "~/nfl/data"

# Create the directory if it doesn't exist
if (!dir.exists(output_dir)) {
  dir.create(output_dir, recursive = TRUE)
}

# Define years to download
years <- 1999:2024

# Loop through each year, download the data, and save it as a CSV
for (year in years) {
  message("Downloading data for ", year)
  tryCatch(
    {
      pbp_year <- load_pbp(year)
      write_csv(pbp_year, file = file.path(output_dir, paste0("pbp_", year, ".csv")))
      message("Data for ", year, " saved successfully.")
    },
    error = function(e) {
      message("Failed to download data for ", year, ": ", e$message)
    }
  )
}

# Combine all yearly data into a single Parquet file
message("Combining all years into a single Parquet file...")
pbp_files <- list.files(output_dir, pattern = "pbp_.*\\.csv$", full.names = TRUE)

# Read and combine all CSV files
pbp_combined <- pbp_files |> 
  map_dfr(read_csv)

# Save the combined data as a Parquet file
combined_output_file <- file.path(output_dir, "pbp_1999_2024.parquet")
write_parquet(pbp_combined, file = combined_output_file)

message("All play-by-play data saved to ", combined_output_file)

Key Changes

	1.	Directory Path:
	•	The output_dir is set to ~/nfl/data. Ensure this path exists or can be created by the script.
	2.	File Saving:
	•	Yearly CSV files are saved in ~/nfl/data/pbp_<year>.csv.
	•	The combined Parquet file is saved as ~/nfl/data/pbp_1999_2024.parquet.
	3.	Parquet File Location:
	•	The combined file is saved alongside the individual yearly files in the same directory.

Verification

	•	After running the script, check the ~/nfl/data folder. It should contain:
	•	Individual CSV files named pbp_<year>.csv for each year from 1999 to 2024.
	•	The combined Parquet file named pbp_1999_2024.parquet.

Let me know if you encounter any issues!


  could not find function "write_parquet"
  
  The error indicates that the arrow package, which provides the write_parquet function, is either not installed or not loaded properly in your R environment. Follow these steps to resolve the issue:

Step 1: Install the arrow Package

Run the following command to install the arrow package:

install.packages("arrow")

Step 2: Load the arrow Library

Ensure the arrow library is loaded at the beginning of your script:

library(arrow)

Step 3: Verify the Installation

After installing, test if the function works by running:

test_data <- tibble(x = 1:5, y = letters[1:5])
write_parquet(test_data, "test_file.parquet")

This will create a test_file.parquet in your working directory. If this works, the function is correctly installed and ready for use.

Updated Script

Here’s the relevant portion of the script with the fix:

# Install and load necessary libraries
install.packages("arrow")  # Run this once
library(arrow)

# Save the combined data as a Parquet file
combined_output_file <- file.path(output_dir, "pbp_1999_2024.parquet")
write_parquet(pbp_combined, file = combined_output_file)

If arrow Fails to Install

If the installation fails (e.g., due to system dependencies), consider using an alternative method to write Parquet files, such as the parquetize() function from the nflfastR package:

library(nflfastR)
parquetize(pbp_combined, path = combined_output_file)

Let me know if you encounter further issues!

# Install nflverse if not already installed
if (!requireNamespace("nflverse", quietly = TRUE)) {
  install.packages("nflverse")
}
library(nflverse)
if (!requireNamespace("arrow", quietly = TRUE)) {
  install.packages("arrow")
}
library(arrow)


# Download player statistics for all available seasons
## must be broken up into decades so all data is collected
## 2000's
player_stats_2000 <- load_player_stats(seasons = 2000:2009)
write_parquet(player_stats_2000, "data/raw_data/game_stats/player_game_00s.parquet") # nolint: line_length_linter.
## 2010's
player_stats_2010 <- load_player_stats(seasons = 2010:2019)
write_parquet(player_stats_2010, "data/raw_data/game_stats/player_game_10s.parquet") # nolint: line_length_linter.
## 2020-2023
player_stats_2020 <- load_player_stats(seasons = 2020:2023)
write_parquet(player_stats_2020, "data/raw_data/game_stats/player_game_20s.parquet") # nolint: line_length_linter.

## Also downloading player game data for players in the current season
player_stats_2024 <- load_player_stats(seasons = 2024)
write_parquet(player_stats_2024, "data/raw_data/game_stats/player_game_current.parquet") # nolint: line_length_linter.

# Download team stats for each season

#download qbr stats 2006-2024
qbr_to_2023 <- load_espn_qbr(league = "nfl", seasons = 2006:2023)
write_parquet(qbr_to_2023, "data/raw_data/advanced_stats/qbr_06_23.parquet") # nolint: line_length_linter.

qbr_2024 <- load_espn_qbr(league = "nfl", seasons = 2024)
write_parquet(qbr_2024, "data/raw_data/advanced_stats/qbr_2024.parquet")

nextgen_16_24 <- load_nextgen_stats(seasons = 2016:2024)
write_parquet(nextgen_16_24, "data/raw_data/advanced_stats/next_gen.parquet")

# pbp data

for (year in 2000:2024) {
  tryCatch({
    # Download play-by-play data for the year
    pbp_data <- load_pbp(year)
    # Define the output file name
    output_file <- file.path("data/raw_data/pbp", paste0("playbyplay_", year, ".parquet"))
    # Save the data as a Parquet file
    write_parquet(pbp_data, output_file)
    # Message indicating success
    message("Successfully saved play-by-play data for ", year, " to ", output_file)
  }, error = function(e) {
    # Handle any errors
    message("Error downloading or saving data for ", year, ": ", e$message)
  })
}


> write_parquet(player_stats_2000, "data/raw_data/game_stats/player_game_00s.parquet") # nolint: line_length_linter.
Error: IOError: Failed to open local file 'data/raw_data/game_stats/player_game_00s.parquet'. Detail: [errno 2] No such file or directory
> /game_stats
Error: unexpected '/' in "/"
> write_parquet(player_stats_2010, "data/raw_data/game_stats/player_game_10s.parquet") # nolint: line_length_linter.
Error: object 'player_stats_2010' not found
> ## 2020-2023
> player_stats_2020 <- load_player_stats(seasons = 2020:2023)
> write_parquet(player_stats_2020, "data/raw_data/game_stats/player_game_20s.parquet") # nolint: line_length_linter.
Error: IOError: Failed to open local file 'data/raw_data/game_stats/player_game_20s.parquet'. Detail: [errno 2] No such file or directory
> ## Also downloading player game data for players in the current season
> player_stats_2024 <- load_player_stats(seasons = 2024)
> write_parquet(player_stats_2024, "data/raw_data/game_stats/player_game_current.parquet") # nolint: line_length_linter.
Error: IOError: Failed to open local file 'data/raw_data/game_stats/player_game_current.parquet'. Detail: [errno 2] No such file or directory

The errors indicate that the specified directory (data/raw_data/game_stats) does not exist. R cannot create directories automatically when saving files, so you need to ensure the folder structure is created before writing the Parquet files.

Here’s how you can fix it:

Solution: Create the Directory

Modify the script to check for and create the necessary directories before saving the files.

Updated Script

# Ensure required libraries are installed and loaded
if (!requireNamespace("nflverse", quietly = TRUE)) {
  install.packages("nflverse")
}
if (!requireNamespace("arrow", quietly = TRUE)) {
  install.packages("arrow")
}
library(nflverse)
library(arrow)

# Create directories if they don't exist
dir.create("data/raw_data/game_stats", recursive = TRUE, showWarnings = FALSE)
dir.create("data/raw_data/advanced_stats", recursive = TRUE, showWarnings = FALSE)
dir.create("data/raw_data/pbp", recursive = TRUE, showWarnings = FALSE)

# Download player statistics for all available seasons
## 2000's
player_stats_2000 <- load_player_stats(seasons = 2000:2009)
write_parquet(player_stats_2000, "data/raw_data/game_stats/player_game_00s.parquet")

## 2010's
player_stats_2010 <- load_player_stats(seasons = 2010:2019)
write_parquet(player_stats_2010, "data/raw_data/game_stats/player_game_10s.parquet")

## 2020-2023
player_stats_2020 <- load_player_stats(seasons = 2020:2023)
write_parquet(player_stats_2020, "data/raw_data/game_stats/player_game_20s.parquet")

## 2024
player_stats_2024 <- load_player_stats(seasons = 2024)
write_parquet(player_stats_2024, "data/raw_data/game_stats/player_game_current.parquet")

# Download advanced stats
qbr_to_2023 <- load_espn_qbr(league = "nfl", seasons = 2006:2023)
write_parquet(qbr_to_2023, "data/raw_data/advanced_stats/qbr_06_23.parquet")

qbr_2024 <- load_espn_qbr(league = "nfl", seasons = 2024)
write_parquet(qbr_2024, "data/raw_data/advanced_stats/qbr_2024.parquet")

nextgen_16_24 <- load_nextgen_stats(seasons = 2016:2024)
write_parquet(nextgen_16_24, "data/raw_data/advanced_stats/next_gen.parquet")

# Download play-by-play data for each year
for (year in 2000:2024) {
  tryCatch({
    pbp_data <- load_pbp(year)
    output_file <- file.path("data/raw_data/pbp", paste0("playbyplay_", year, ".parquet"))
    write_parquet(pbp_data, output_file)
    message("Successfully saved play-by-play data for ", year)
  }, error = function(e) {
    message("Error downloading or saving data for ", year, ": ", e$message)
  })
}

Key Changes

	1.	Directory Creation:
	•	dir.create() ensures the necessary directories exist.
	•	recursive = TRUE creates parent directories if they do not exist.
	•	showWarnings = FALSE suppresses warnings if the directory already exists.
	2.	Error Handling:
	•	Retains tryCatch for downloading play-by-play data to handle potential download failures gracefully.
	3.	Test Directory Paths:
	•	Verify the paths (data/raw_data/...) are correct relative to your R working directory.
	•	You can check your current working directory using:

getwd()



Verify the Script

Run the script, and confirm the directories and files are created under data/raw_data/.... If issues persist, ensure the working directory is set correctly using:

setwd("your/project/path")

why are none of these working, i would like a script to download the data and it isn't working, what information do you need to fix the script so that I can see the data

To resolve the issue and ensure the script works for downloading and saving the data, let’s troubleshoot systematically. Here’s what I need to know and check to help you fix it:

1. R Setup and Dependencies

	•	Have you installed the required libraries nflverse and arrow?
	•	If not, run:

install.packages(c("nflverse", "arrow"))


	•	Can you confirm these libraries load successfully without errors?

library(nflverse)
library(arrow)



2. Directory Structure

	•	Are you running the script in a project with a specific directory structure? What is the output of:

getwd()


	•	Verify if the directory data/raw_data/game_stats/ exists. If not, it must be created explicitly.

3. Write Permissions

	•	Does the R session have permission to write files in the current working directory? Check with:

file.create("test_file.txt")

If this fails, R cannot write files, and you’ll need to adjust permissions or change the working directory.

4. NFL Data

	•	Does load_pbp() or load_player_stats() retrieve data without errors? Test:

pbp_data <- load_pbp(2023)
head(pbp_data)



5. Script Behavior

	•	Run the following minimal test script to isolate the problem:

# Ensure directory exists
dir.create("data/raw_data/test", recursive = TRUE, showWarnings = FALSE)

# Test data loading
pbp_test <- load_pbp(2023)

# Save test data
write_parquet(pbp_test, "data/raw_data/test/test_playbyplay_2023.parquet")


	•	Does it succeed? If not, what is the exact error message?

Complete Revised Script

Below is a robust script designed to handle common issues. It includes error handling and creates directories if needed.

# Ensure required libraries are installed
if (!requireNamespace("nflverse", quietly = TRUE)) install.packages("nflverse")
if (!requireNamespace("arrow", quietly = TRUE)) install.packages("arrow")

library(nflverse)
library(arrow)

# Define base directories
base_dir <- "data/raw_data"
game_stats_dir <- file.path(base_dir, "game_stats")
pbp_dir <- file.path(base_dir, "pbp")
advanced_stats_dir <- file.path(base_dir, "advanced_stats")

# Create directories if they don't exist
dir.create(game_stats_dir, recursive = TRUE, showWarnings = FALSE)
dir.create(pbp_dir, recursive = TRUE, showWarnings = FALSE)
dir.create(advanced_stats_dir, recursive = TRUE, showWarnings = FALSE)

# Test Play-by-Play Data Download
for (year in 2023:2024) { # Modify to 2000:2024 for full range
  tryCatch({
    pbp_data <- load_pbp(year)  # Download data
    output_file <- file.path(pbp_dir, paste0("playbyplay_", year, ".parquet"))
    write_parquet(pbp_data, output_file)  # Save to file
    message("Successfully saved play-by-play data for ", year)
  }, error = function(e) {
    message("Error downloading or saving data for ", year, ": ", e$message)
  })
}

Next Steps

	•	Run the minimal test script above and confirm whether it succeeds.
	•	If errors persist, share the exact error messages and your R session’s current working directory:

getwd()
sessionInfo()



This will help pinpoint the root cause of the issue.

> # Install nflverse if not already installed
> if (!requireNamespace("nflverse", quietly = TRUE)) {
+   install.packages("nflverse")
+ }
> library(nflverse)
> if (!requireNamespace("arrow", quietly = TRUE)) {
+   install.packages("arrow")
+ }
> library(arrow)
> 
> 
> # Download player statistics for all available seasons
> ## must be broken up into decades so all data is collected
> ## 2000's
> player_stats_2000 <- load_player_stats(seasons = 2000:2009)
> write_parquet(player_stats_2000, "data/raw_data/game_stats/player_game_00s.parquet") # nolint: line_length_linter.
> ## 2010's
> player_stats_2010 <- load_player_stats(seasons = 2010:2019)
> write_parquet(player_stats_2010, "data/raw_data/game_stats/player_game_10s.parquet") # nolint: line_length_linter.
> ## 2020-2023
> player_stats_2020 <- load_player_stats(seasons = 2020:2023)
> write_parquet(player_stats_2020, "data/raw_data/game_stats/player_game_20s.parquet") # nolint: line_length_linter.
> 
> ## Also downloading player game data for players in the current season
> player_stats_2024 <- load_player_stats(seasons = 2024)
> write_parquet(player_stats_2024, "data/raw_data/game_stats/player_game_current.parquet") # nolint: line_length_linter.
> 
> # Download team stats for each season
> 
> #download qbr stats 2006-2024
> qbr_to_2023 <- load_espn_qbr(league = "nfl", seasons = 2006:2023)
Error in load_espn_qbr(league = "nfl", seasons = 2006:2023) : 
  unused argument (league = "nfl")
  
  The error indicates that the load_espn_qbr function does not accept the argument league. This is likely due to changes or differences in the function’s implementation.

Here’s how to fix the issue and proceed:

Fix for load_espn_qbr

	1.	Check the Function’s Usage
	•	Remove the league argument, as it may not be necessary. Update your code to:

qbr_to_2023 <- load_espn_qbr(seasons = 2006:2023)


	2.	Verify the Functionality
	•	Run the above line to confirm if the function works without errors. If you encounter issues, it’s possible the nflverse library has undergone updates, and some functionalities have changed.
	3.	Install the Latest nflverse
	•	Make sure you are using the most recent version of the nflverse package:

install.packages("nflverse")


	4.	Error Handling
	•	Wrap the function in a tryCatch block to handle any potential errors:

tryCatch({
  qbr_to_2023 <- load_espn_qbr(seasons = 2006:2023)
  write_parquet(qbr_to_2023, "data/raw_data/advanced_stats/qbr_06_23.parquet")
}, error = function(e) {
  message("Error downloading QBR data: ", e$message)
})

Updated Script for QBR Stats

Here’s the corrected portion of your script:

# Download QBR stats for 2006-2023
tryCatch({
  qbr_to_2023 <- load_espn_qbr(seasons = 2006:2023)  # Adjusted function call
  write_parquet(qbr_to_2023, "data/raw_data/advanced_stats/qbr_06_23.parquet")
  message("Successfully saved QBR stats for 2006-2023.")
}, error = function(e) {
  message("Error downloading QBR stats: ", e$message)
})

# Download QBR stats for 2024
tryCatch({
  qbr_2024 <- load_espn_qbr(seasons = 2024)
  write_parquet(qbr_2024, "data/raw_data/advanced_stats/qbr_2024.parquet")
  message("Successfully saved QBR stats for 2024.")
}, error = function(e) {
  message("Error downloading QBR stats for 2024: ", e$message)
})

If the Issue Persists

	•	Share the output of:

?load_espn_qbr

This will provide the documentation for the function, clarifying its arguments.

	•	Confirm your nflverse version:

packageVersion("nflverse")

> # Install nflverse if not already installed
> if (!requireNamespace("nflverse", quietly = TRUE)) {
+   install.packages("nflverse")
+ }
> library(nflverse)
> if (!requireNamespace("arrow", quietly = TRUE)) {
+   install.packages("arrow")
+ }
> library(arrow)
> 
> 
> # Download player statistics for all available seasons
> ## must be broken up into decades so all data is collected
> ## 2000's
> player_stats_2000 <- load_player_stats(seasons = 2000:2009)
> write_parquet(player_stats_2000, "data/raw_data/game_stats/player_game_00s.parquet") # nolint: line_length_linter.
> ## 2010's
> player_stats_2010 <- load_player_stats(seasons = 2010:2019)
> write_parquet(player_stats_2010, "data/raw_data/game_stats/player_game_10s.parquet") # nolint: line_length_linter.
> ## 2020-2023
> player_stats_2020 <- load_player_stats(seasons = 2020:2023)
> write_parquet(player_stats_2020, "data/raw_data/game_stats/player_game_20s.parquet") # nolint: line_length_linter.
> 
> ## Also downloading player game data for players in the current season
> player_stats_2024 <- load_player_stats(seasons = 2024)
> write_parquet(player_stats_2024, "data/raw_data/game_stats/player_game_current.parquet") # nolint: line_length_linter.
> 
> # Download team stats for each season
> 
> # Download QBR stats for 2006-2023
> tryCatch({
+   qbr_to_2023 <- load_espn_qbr(seasons = 2006:2023)  # Adjusted function call
+   write_parquet(qbr_to_2023, "data/raw_data/advanced_stats/qbr_06_23.parquet")
+   message("Successfully saved QBR stats for 2006-2023.")
+ }, error = function(e) {
+   message("Error downloading QBR stats: ", e$message)
+ })
Successfully saved QBR stats for 2006-2023.
> 
> # Download QBR stats for 2024
> tryCatch({
+   qbr_2024 <- load_espn_qbr(seasons = 2024)
+   write_parquet(qbr_2024, "data/raw_data/advanced_stats/qbr_2024.parquet")
+   message("Successfully saved QBR stats for 2024.")
+ }, error = function(e) {
+   message("Error downloading QBR stats for 2024: ", e$message)
+ })
Successfully saved QBR stats for 2024.
> 
> nextgen_16_24 <- load_nextgen_stats(seasons = 2016:2024)
> write_parquet(nextgen_16_24, "data/raw_data/advanced_stats/next_gen.parquet")
> 
> # pbp data
> 
> for (year in 2000:2024) {
+   tryCatch({
+     # Download play-by-play data for the year
+     pbp_data <- load_pbp(year)
+     # Define the output file name
+     output_file <- file.path("data/raw_data/pbp", paste0("playbyplay_", year, ".parquet"))
+     # Save the data as a Parquet file
+     write_parquet(pbp_data, output_file)
+     # Message indicating success
+     message("Successfully saved play-by-play data for ", year, " to ", output_file)
+   }, error = function(e) {
+     # Handle any errors
+     message("Error downloading or saving data for ", year, ": ", e$message)
+   })
+ }
Error: evaluation nested too deeply: infinite recursion / options(expressions=)?

The error “evaluation nested too deeply: infinite recursion” typically occurs in R when there is a recursion limit reached or a bug in the code or library. In your case, it likely stems from the load_pbp function, as this function tries to download data for multiple years in a loop.

Here’s how you can debug and resolve the issue:

Steps to Fix

	1.	Increase Recursion Limit
	•	The default recursion limit in R is relatively low. Increase it using:

options(expressions = 5000)

Add this line before your for loop to avoid the recursion limit error.

	2.	Break Down the Loop
	•	Instead of processing all years (2000:2024) at once, split the range into smaller batches (e.g., 2000:2010, 2011:2024) and process them separately.
Example:

for (year in 2000:2010) {
  tryCatch({
    pbp_data <- load_pbp(year)
    output_file <- file.path("data/raw_data/pbp", paste0("playbyplay_", year, ".parquet"))
    write_parquet(pbp_data, output_file)
    message("Successfully saved play-by-play data for ", year, " to ", output_file)
  }, error = function(e) {
    message("Error downloading or saving data for ", year, ": ", e$message)
  })
}


	3.	Validate the load_pbp Function
	•	Ensure the load_pbp function is correctly implemented and compatible with the specified years. If any year does not have data available, it might cause the function to fail. You can handle this by skipping problematic years.
Example:

tryCatch({
  pbp_data <- load_pbp(year)
}, error = function(e) {
  message("Skipping year ", year, ": ", e$message)
})


	4.	Test With a Single Year
	•	Run the load_pbp function for a single year to confirm that it works properly:

pbp_data <- load_pbp(2020)
write_parquet(pbp_data, "data/raw_data/pbp/playbyplay_2020.parquet")

If this fails, there might be an issue with the nflverse library or the year’s data.

	5.	Debugging Messages
	•	Add debug messages inside the loop to monitor progress:

message("Processing year: ", year)

Updated Code

Here’s a refined version of your loop:

options(expressions = 5000) # Increase recursion limit

# Process play-by-play data in smaller batches
for (year in 2000:2024) {
  tryCatch({
    message("Processing play-by-play data for year: ", year)
    pbp_data <- load_pbp(year) # Load data for the year
    output_file <- file.path("data/raw_data/pbp", paste0("playbyplay_", year, ".parquet"))
    write_parquet(pbp_data, output_file) # Save data
    message("Successfully saved play-by-play data for ", year)
  }, error = function(e) {
    message("Error processing year ", year, ": ", e$message)
  })
}

If the Problem Persists

	•	Check Specific Years: Run the load_pbp function for individual years to identify problematic years.
	•	Library Updates: Ensure your nflverse library is up-to-date, as outdated libraries may have bugs.

install.packages("nflverse")


	•	Inspect Error Details: Use traceback() immediately after the error to understand its origin:

traceback()



Let me know how it goes!